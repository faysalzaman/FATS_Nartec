{
    "sourceFile": "lib/screens/AssetForPrinting/AssetForPrintingScreen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752144406507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752146233958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n       body: isLoading == true\n           ? Center(\n               child: CircularProgressIndicator(\n                 color: Constant.primaryColor,\n-                strokeWidth: 5,\n+                strokeWidth: 2,\n                 strokeCap: StrokeCap.round,\n               ),\n             )\n           : assetGenerateModel.isEmpty\n"
                }
            ],
            "date": 1752144406507,
            "name": "Commit-0",
            "content": "import 'package:fats_client/Services/AssetForPrinting/AssetForPrintingServices.dart';\nimport 'package:fats_client/Services/AssetVarification/DeleteTag.dart';\nimport 'package:fats_client/screens/AssetForPrinting/BarcodeLabelScreen.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:get/get.dart';\n\nimport '../../constants.dart';\nimport '../../models/AssetForPrintingModel.dart';\n\nclass AssetForPrintingScreen extends StatefulWidget {\n  const AssetForPrintingScreen({super.key});\n\n  @override\n  State<AssetForPrintingScreen> createState() => _AssetForPrintingScreenState();\n}\n\nclass _AssetForPrintingScreenState extends State<AssetForPrintingScreen> {\n  List<AssetForPrintingModel> assetGenerateModel = [];\n  List<bool> isMarked = [];\n  int rowsPerPage = PaginatedDataTable.defaultRowsPerPage;\n\n  bool isLoading = true;\n\n  @override\n  void initState() {\n    super.initState();\n    Future.delayed(\n      Duration.zero,\n      () {\n        AssetForPrintingServices.assetForPrint().then(\n          (response) {\n            assetGenerateModel = response;\n            for (int i = 0; i < assetGenerateModel.length; i++) {\n              isMarked.add(false);\n            }\n            setState(() {\n              isLoading = false;\n            });\n          },\n        ).onError(\n          (error, stackTrace) {\n            Navigator.pop(context);\n            print(\"Error is: $error\");\n            setState(() {\n              isLoading = false;\n            });\n          },\n        );\n      },\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        title: const Text('Printing Assets'),\n        backgroundColor: Constant.primaryColor,\n        foregroundColor: Colors.white,\n        centerTitle: true,\n        elevation: 0,\n      ),\n      body: isLoading == true\n          ? Center(\n              child: CircularProgressIndicator(\n                color: Constant.primaryColor,\n                strokeWidth: 2,\n                strokeCap: StrokeCap.round,\n              ),\n            )\n          : assetGenerateModel.isEmpty\n              ? Center(\n                  child: Image.network(Constant.placeHolderImage),\n                )\n              : Stack(\n                  children: [\n                    SingleChildScrollView(\n                      child: Column(\n                        children: [\n                          PaginatedDataTable(\n                            header: const Text(\n                              'Assets',\n                              style: TextStyle(\n                                color: Colors.black,\n                                fontSize: 13,\n                              ),\n                            ),\n                            rowsPerPage: rowsPerPage,\n                            headingRowColor: MaterialStateProperty.all(\n                                Constant.primaryColor),\n                            onRowsPerPageChanged: (value) {\n                              setState(() {\n                                rowsPerPage = value ??\n                                    PaginatedDataTable.defaultRowsPerPage;\n                              });\n                            },\n                            columns: [\n                              dataColumnWidget(\"Mark\"),\n                              dataColumnWidget(\"Id\"),\n                              dataColumnWidget(\"Major Category\"),\n                              dataColumnWidget(\"Major Category Description\"),\n                              dataColumnWidget(\"Minor Category\"),\n                              dataColumnWidget(\"Minor Category Description\"),\n                              dataColumnWidget(\"Tag Number\"),\n                              dataColumnWidget(\"Serial Number\"),\n                              dataColumnWidget(\"Asset Description\"),\n                              dataColumnWidget(\"Asset Type\"),\n                              dataColumnWidget(\"Asset Condition\"),\n                              dataColumnWidget(\"Manufacturer\"),\n                              dataColumnWidget(\"Model Manufacturer\"),\n                              dataColumnWidget(\"Region\"),\n                              dataColumnWidget(\"Country\"),\n                              dataColumnWidget(\"City\"),\n                              dataColumnWidget(\"Department Code\"),\n                              dataColumnWidget(\"Department Name\"),\n                              dataColumnWidget(\"Business Unit\"),\n                              dataColumnWidget(\"Building Number\"),\n                              dataColumnWidget(\"Floor Number\"),\n                              dataColumnWidget(\"Employee Id\"),\n                              dataColumnWidget(\"PO Number\"),\n                              dataColumnWidget(\"Delivery Note Number\"),\n                              dataColumnWidget(\"Supplier\"),\n                              dataColumnWidget(\"Invoice Number\"),\n                              dataColumnWidget(\"Invoice Date\"),\n                              dataColumnWidget(\"Ownership\"),\n                              dataColumnWidget(\"Bought\"),\n                              dataColumnWidget(\"Terminal Id\"),\n                              dataColumnWidget(\"ATM Number\"),\n                              dataColumnWidget(\"Location Tag\"),\n                              dataColumnWidget(\"Building Name\"),\n                              dataColumnWidget(\"Building Address\"),\n                              dataColumnWidget(\"User Login Id\"),\n                              dataColumnWidget(\"Main Sub Series\"),\n                              dataColumnWidget(\n                                  \"Major Categories Plus Miner Categories\"),\n                              dataColumnWidget(\"Asset Date Captured\"),\n                              dataColumnWidget(\"Asset Time Captured\"),\n                              dataColumnWidget(\"Asset Date Scanned\"),\n                              dataColumnWidget(\"Asset Time Scanned\"),\n                              dataColumnWidget(\"Qty\"),\n                              dataColumnWidget(\"Phone Exit Number\"),\n                              dataColumnWidget(\"Full Location Details\"),\n                              dataColumnWidget(\"Delete Asset\"),\n                            ],\n                            source: AssetDataSource(\n                              context: context,\n                              assetGenerateModel: assetGenerateModel,\n                              isMarked: isMarked,\n                              setState: setState,\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n                    Positioned(\n                      right: 10,\n                      top: 10,\n                      child: ElevatedButton(\n                        style: ElevatedButton.styleFrom(\n                          backgroundColor: Constant.primaryColor,\n                        ),\n                        onPressed: () {\n                          List<String> _tagNumber = [];\n                          List<String> _assetDescription = [];\n                          List<String> _barcodeInfo = [];\n                          for (int i = 0; i < isMarked.length; i++) {\n                            if (isMarked[i]) {\n                              _tagNumber.add(assetGenerateModel[i].tagNumber!);\n                              _assetDescription\n                                  .add(assetGenerateModel[i].aSSETdESCRIPTION!);\n                              _barcodeInfo.add(\n                                  assetGenerateModel[i].tagNumber! +\n                                      \" \" +\n                                      assetGenerateModel[i]\n                                          .minorCategoryDescription!);\n                            }\n                          }\n                          if (_tagNumber.isEmpty) {\n                            ScaffoldMessenger.of(context).showSnackBar(\n                              const SnackBar(\n                                content:\n                                    Text('Please select at least one asset'),\n                                backgroundColor: Colors.red,\n                              ),\n                            );\n                          } else {\n                            Get.to(\n                              () => BarcodeLabelScreen(\n                                tagNumber: _tagNumber,\n                                assetDescription: _assetDescription,\n                                qrCode: _barcodeInfo,\n                              ),\n                            );\n                          }\n                        },\n                        child: Text(\n                          \"Print Asset\",\n                          style: TextStyle(\n                            color: Colors.white,\n                          ),\n                        ),\n                      ),\n                    ),\n                  ],\n                ),\n    );\n  }\n\n  DataColumn dataColumnWidget(String label) {\n    return DataColumn(\n      label: Text(label, style: const TextStyle(color: Colors.white)),\n    );\n  }\n\n  @override\n  void dispose() {\n    super.dispose();\n    assetGenerateModel.clear();\n    isMarked.clear();\n  }\n}\n\nclass AssetDataSource extends DataTableSource {\n  final BuildContext context;\n  final List<AssetForPrintingModel> assetGenerateModel;\n  final List<bool> isMarked;\n  final void Function(VoidCallback fn) setState;\n\n  AssetDataSource({\n    required this.context,\n    required this.assetGenerateModel,\n    required this.isMarked,\n    required this.setState,\n  });\n\n  @override\n  DataRow getRow(int index) {\n    final asset = assetGenerateModel[index];\n    return DataRow(\n      cells: [\n        DataCell(Checkbox(\n          value: isMarked[index],\n          onChanged: (value) {\n            setState(() {\n              isMarked[index] = value!;\n            });\n          },\n        )),\n        DataCell(Text((index + 1).toString())),\n        DataCell(Text(asset.majorCategory ?? '')),\n        DataCell(Text(asset.majorCategoryDescription.toString())),\n        DataCell(Text(asset.mInorCategory.toString())),\n        DataCell(Text(asset.minorCategoryDescription.toString())),\n        DataCell(\n          Row(\n            mainAxisAlignment: MainAxisAlignment.spaceAround,\n            children: [\n              SelectableText(asset.tagNumber ?? \"\"),\n              IconButton(\n                onPressed: () {\n                  Clipboard.setData(ClipboardData(text: asset.tagNumber ?? \"\"));\n                  ScaffoldMessenger.of(context).showSnackBar(\n                    const SnackBar(\n                      content: Text('Tag Number Copied to Clipboard'),\n                      backgroundColor: Colors.black,\n                    ),\n                  );\n                },\n                icon: const Icon(\n                  Icons.copy,\n                  color: Colors.grey,\n                ),\n              ),\n            ],\n          ),\n        ),\n        DataCell(Text(asset.sERIALnUMBER ?? \"\")),\n        DataCell(Text(asset.aSSETdESCRIPTION ?? \"\")),\n        DataCell(Text(asset.assettYPE ?? \"\")),\n        DataCell(Text(asset.aSSETcONDITION ?? \"\")),\n        DataCell(Text(asset.manufacturer ?? \"\")),\n        DataCell(Text(asset.modelofAsset ?? \"\")),\n        DataCell(Text(asset.rEGION ?? \"\")),\n        DataCell(Text(asset.cOUNTRY ?? \"\")),\n        DataCell(Text(asset.cityName ?? \"\")),\n        DataCell(Text(asset.dao ?? \"\")),\n        DataCell(Text(asset.daoName ?? \"\")),\n        DataCell(Text(asset.businessUnit ?? \"\")),\n        DataCell(Text(asset.bUILDINGNO ?? \"\")),\n        DataCell(Text(asset.fLOORNO ?? \"\")),\n        DataCell(Text(asset.eMPLOYEEID ?? \"\")),\n        DataCell(Text(asset.ponUmber ?? \"\")),\n        DataCell(Text(asset.deliveryNoteNo ?? \"\")),\n        DataCell(Text(asset.supplier ?? \"\")),\n        DataCell(Text(asset.invoiceNo ?? \"\")),\n        DataCell(Text(asset.invoiceDate ?? \"\")),\n        DataCell(Text(asset.ownership ?? \"\")),\n        DataCell(Text(asset.bought ?? \"\")),\n        DataCell(Text(asset.terminalID ?? \"\")),\n        DataCell(Text(asset.aTMNumber ?? \"\")),\n        DataCell(Text(asset.locationTag ?? \"\")),\n        DataCell(Text(asset.buildingName ?? \"\")),\n        DataCell(Text(asset.buildingAddress ?? \"\")),\n        DataCell(Text(asset.userLoginID ?? \"\")),\n        DataCell(Text(asset.mainSubSeriesNo?.toString() ?? \"\")),\n        const DataCell(Text(\"\")),\n        DataCell(Text(asset.assetdatecaptured ?? \"\")),\n        DataCell(Text(asset.assetTimeCaptured ?? \"\")),\n        DataCell(Text(asset.assetdatescanned ?? \"\")),\n        DataCell(Text(asset.assettimeScanned ?? \"\")),\n        DataCell(Text(asset.qTY?.toString() ?? \"\")),\n        DataCell(Text(asset.phoneExtNo ?? \"\")),\n        DataCell(Text(asset.fullLocationDetails ?? \"\")),\n        DataCell(\n          IconButton(\n            onPressed: () {\n              showDialog(\n                context: context,\n                builder: (context) => AlertDialog(\n                  title:\n                      const Text('Are you sure you want to delete this asset?'),\n                  actions: [\n                    TextButton(\n                      onPressed: () {\n                        Navigator.pop(context);\n                      },\n                      child: const Text('No'),\n                    ),\n                    TextButton(\n                      onPressed: () async {\n                        Constant.showLoadingDialog(context);\n                        await DeleteTagServices.deleteTag(\n                            asset.tagNumber ?? \"\");\n                        Navigator.pop(context);\n                        Navigator.pop(context);\n\n                        setState(() {\n                          assetGenerateModel.removeAt(index);\n                        });\n                      },\n                      child: const Text('Yes'),\n                    ),\n                  ],\n                ),\n              );\n            },\n            icon: const Icon(\n              Icons.delete,\n              color: Colors.red,\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n\n  @override\n  int get rowCount => assetGenerateModel.length;\n\n  @override\n  bool get isRowCountApproximate => false;\n\n  @override\n  int get selectedRowCount => isMarked.where((marked) => marked).length;\n}\n"
        }
    ]
}