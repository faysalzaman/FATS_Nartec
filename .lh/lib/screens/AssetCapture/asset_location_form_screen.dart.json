{
    "sourceFile": "lib/screens/AssetCapture/asset_location_form_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752154069799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752154100200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n // ignore_for_file: non_constant_identifier_names\n \n+import 'package:fats_client/Services/GetAllCities/GetAllCitiesService.dart';\n import 'package:fats_mobile_nartec/Services/GetAllCities/GetAllCitiesService.dart';\n import 'package:fats_mobile_nartec/screens/AssetCapture/send_barcode_screen.dart';\n import 'package:fats_mobile_nartec/Services/GetArea/getAreaServices.dart';\n import 'package:fats_mobile_nartec/constants.dart';\n"
                },
                {
                    "date": 1752154106438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n // ignore_for_file: non_constant_identifier_names\n \n import 'package:fats_client/Services/GetAllCities/GetAllCitiesService.dart';\n+import 'package:fats_client/constants.dart';\n import 'package:fats_mobile_nartec/Services/GetAllCities/GetAllCitiesService.dart';\n import 'package:fats_mobile_nartec/screens/AssetCapture/send_barcode_screen.dart';\n import 'package:fats_mobile_nartec/Services/GetArea/getAreaServices.dart';\n import 'package:fats_mobile_nartec/constants.dart';\n"
                },
                {
                    "date": 1752154111775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n // ignore_for_file: non_constant_identifier_names\n \n import 'package:fats_client/Services/GetAllCities/GetAllCitiesService.dart';\n+import 'package:fats_client/Services/GetArea/getAreaServices.dart';\n import 'package:fats_client/constants.dart';\n import 'package:fats_mobile_nartec/Services/GetAllCities/GetAllCitiesService.dart';\n import 'package:fats_mobile_nartec/screens/AssetCapture/send_barcode_screen.dart';\n import 'package:fats_mobile_nartec/Services/GetArea/getAreaServices.dart';\n"
                },
                {
                    "date": 1752154124698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n import 'package:fats_client/Services/GetAllCities/GetAllCitiesService.dart';\n import 'package:fats_client/Services/GetArea/getAreaServices.dart';\n import 'package:fats_client/constants.dart';\n+import 'package:fats_client/screens/AssetCapture/send_barcode_screen.dart';\n import 'package:flutter/material.dart';\n import 'package:get/get.dart';\n \n import '../../Services/GetDepartment/getDepartment.dart';\n"
                }
            ],
            "date": 1752154069799,
            "name": "Commit-0",
            "content": "// ignore_for_file: non_constant_identifier_names\n\nimport 'package:fats_mobile_nartec/Services/GetAllCities/GetAllCitiesService.dart';\nimport 'package:fats_mobile_nartec/screens/AssetCapture/send_barcode_screen.dart';\nimport 'package:fats_mobile_nartec/Services/GetArea/getAreaServices.dart';\nimport 'package:fats_mobile_nartec/constants.dart';\nimport 'package:flutter/material.dart';\nimport 'package:get/get.dart';\n\nimport '../../Services/GetDepartment/getDepartment.dart';\nimport '../../widgets/text_form_field_widget.dart';\nimport '../../Services/Login/LoginServices.dart';\nimport '../../widgets/button_widget.dart';\n\nclass AssetLocationFormScreen extends StatefulWidget {\n  const AssetLocationFormScreen({super.key});\n\n  @override\n  State<AssetLocationFormScreen> createState() =>\n      _AssetLocationFormScreenState();\n}\n\nclass _AssetLocationFormScreenState extends State<AssetLocationFormScreen> {\n  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();\n\n  String regionCode = \"\";\n  String area = \"\";\n\n  String selectFloorNo = \"\";\n  List<String> floorNoList = [];\n\n  String selectCountry = \"\";\n  List<String> countryList = [];\n\n  String selectCity = \"\";\n  List<String> cityList = [];\n\n  String departmentName = \"\";\n  List<String> departmentList = [];\n\n  String businessUnit = \"\";\n  List<String> businessUnitList = [];\n\n  String branchCode = \"\";\n  List<String> branchCodeList = [];\n\n  List countryIdList = [];\n  String countryId = \"\";\n\n  TextEditingController areaController = TextEditingController();\n  TextEditingController departmentCodeController = TextEditingController();\n  TextEditingController businessNameController = TextEditingController();\n  TextEditingController buildingNameController = TextEditingController();\n  TextEditingController buildingAddressController = TextEditingController();\n  TextEditingController buildingNoController = TextEditingController();\n\n  // Add FocusNodes\n  final FocusNode _areaFocus = FocusNode();\n  final FocusNode _departmentCodeFocus = FocusNode();\n  final FocusNode _businessNameFocus = FocusNode();\n  final FocusNode _buildingNameFocus = FocusNode();\n  final FocusNode _buildingAddressFocus = FocusNode();\n  final FocusNode _buildingNoFocus = FocusNode();\n\n  @override\n  void initState() {\n    super.initState();\n\n    Future.delayed(Duration.zero, () async {\n      Constant.showLoadingDialog(context);\n\n      var value = await LoginServices.countriesList();\n      setState(() {\n        countryList = [];\n        countryIdList = [];\n        for (var i = 0; i < value.length; i++) {\n          // Safely handle null values\n          final countryName = value[i].countryName;\n          final countryId = value[i].tblCountryID;\n          if (countryName != null &&\n              countryName.isNotEmpty &&\n              countryId != null) {\n            countryList.add(countryName);\n            countryIdList.add(countryId.toString());\n          }\n        }\n        // Only set selectCountry if list is not empty\n        if (countryList.isNotEmpty) {\n          Set<String> countrySet = countryList.toSet();\n          countryList = countrySet.toList();\n          selectCountry = countryList[0];\n        }\n      });\n\n      // Only proceed if we have valid country IDs\n      if (countryIdList.isNotEmpty) {\n        countryId = countryIdList[0]; // Changed from index 1 to 0 for safety\n        var city = await GetAllCitiesService.getCityById(countryId);\n\n        setState(() {\n          cityList = [];\n          for (var i = 0; i < city.length; i++) {\n            final cityName = city[i].cityName;\n            if (cityName != null && cityName.isNotEmpty) {\n              cityList.add(cityName);\n            }\n          }\n          if (cityList.isNotEmpty) {\n            Set<String> citySet = cityList.toSet();\n            cityList = citySet.toList();\n            selectCity = cityList[0];\n          }\n        });\n      }\n      Navigator.of(context).pop();\n\n      var department = await GetAllDepartmentsService.getAllDepartments();\n\n      setState(() {\n        // Handle departments - add business group if daoName is null\n        departmentList = [];\n        for (var i = 0; i < department.length; i++) {\n          final daoName = department[i].daoName;\n          final businessGroup = department[i].bUSINESSGROUP;\n\n          if ((daoName != null && daoName.trim().isNotEmpty) ||\n              (businessGroup != null && businessGroup.trim().isNotEmpty)) {\n            // Use daoName if available, otherwise use BUSINESSGROUP\n            String departmentValue =\n                (daoName != null && daoName.trim().isNotEmpty)\n                    ? daoName.trim()\n                    : businessGroup!.trim();\n            departmentList.add(departmentValue);\n          }\n        }\n        // Only set default if list is not empty\n        departmentName = departmentList.isNotEmpty ? departmentList[0] : \"\";\n\n        // Handle floor numbers - only add non-null and non-empty values\n        floorNoList = [];\n        for (var i = 0; i < department.length; i++) {\n          final floorNum = department[i].dAONumber;\n          if (floorNum != null && floorNum.trim().isNotEmpty) {\n            floorNoList.add(floorNum.trim());\n          }\n        }\n        selectFloorNo = floorNoList.isNotEmpty ? floorNoList[0] : \"\";\n\n        // Handle business units - only add non-null and non-empty values\n        businessUnitList = [];\n        for (var i = 0; i < department.length; i++) {\n          final busUnit = department[i].businessUnit;\n          if (busUnit != null && busUnit.trim().isNotEmpty) {\n            businessUnitList.add(busUnit.trim());\n          }\n        }\n        businessUnit = businessUnitList.isNotEmpty ? businessUnitList[0] : \"\";\n\n        // Handle branch codes - only add non-null and non-empty values\n        branchCodeList = [];\n        for (var i = 0; i < department.length; i++) {\n          final branchCode = department[i].branchcode;\n          if (branchCode != null && branchCode.trim().isNotEmpty) {\n            branchCodeList.add(branchCode.trim());\n          }\n        }\n\n        // Set initial values for controllers if data exists\n        if (businessUnitList.isNotEmpty && branchCodeList.isNotEmpty) {\n          businessNameController.text = businessUnitList[0];\n          departmentCodeController.text = branchCodeList[0];\n        }\n      });\n\n      // Handle area\n      if (regionCode.isNotEmpty) {\n        var area = await GetAreaServices.getArea(regionCode);\n        setState(() {\n          areaController.text = area;\n        });\n      }\n    });\n  }\n\n  @override\n  void dispose() {\n    // Dispose FocusNodes\n    _areaFocus.dispose();\n    _departmentCodeFocus.dispose();\n    _businessNameFocus.dispose();\n    _buildingNameFocus.dispose();\n    _buildingAddressFocus.dispose();\n    _buildingNoFocus.dispose();\n\n    // Existing dispose calls\n    areaController.dispose();\n    departmentCodeController.dispose();\n    businessNameController.dispose();\n    buildingNameController.dispose();\n    buildingAddressController.dispose();\n    buildingNoController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        iconTheme: const IconThemeData(color: Colors.white),\n        title: const Text(\n          \"Asset Location Form\",\n          style: TextStyle(\n            color: Colors.white,\n            fontSize: 18,\n          ),\n        ),\n        centerTitle: true,\n        elevation: 0,\n        backgroundColor: Constant.primaryColor,\n      ),\n      body: Container(\n        margin: const EdgeInsets.only(top: 20),\n        padding: const EdgeInsets.symmetric(horizontal: 20),\n        child: Form(\n          key: _formKey,\n          child: SingleChildScrollView(\n            child: Column(\n              children: <Widget>[\n                // Country ...............................................\n                Column(\n                  mainAxisAlignment: MainAxisAlignment.start,\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    SizedBox(\n                      child: const Text(\n                        \"COUNTRY\",\n                        style: TextStyle(\n                          fontSize: 15,\n                          color: Colors.black,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                    ),\n                    const SizedBox(height: 10),\n                    Container(\n                      padding: const EdgeInsets.symmetric(horizontal: 10),\n                      decoration: BoxDecoration(\n                        border: Border.all(\n                          color: Colors.grey,\n                        ),\n                        borderRadius: BorderRadius.circular(10),\n                      ),\n                      child: DropdownButtonFormField(\n                        value: selectCountry,\n                        isExpanded: true,\n                        items: countryList.map((value) {\n                          return DropdownMenuItem(\n                            value: value,\n                            child: Text(value),\n                          );\n                        }).toList(),\n                        onChanged: (value) {\n                          selectCountry = value.toString();\n                          int selectedIndex = countryList.indexOf(value!) - 1;\n                          if (selectedIndex >= 0 &&\n                              selectedIndex < countryIdList.length) {\n                            countryId = countryIdList[selectedIndex];\n                            GetAllCitiesService.getCityById(countryId)\n                                .then((value) {\n                              setState(() {\n                                cityList = [\"Select City\"];\n                                for (var i = 0; i < value.length; i++) {\n                                  if (value[i].cityName != null &&\n                                      value[i].cityName!.isNotEmpty) {\n                                    cityList.add(value[i].cityName!);\n                                  }\n                                }\n                                Set<String> citySet = cityList.toSet();\n                                cityList = citySet.toList();\n                                selectCity = cityList[0];\n                              });\n                            });\n                          }\n                        },\n                      ),\n                    ),\n                  ],\n                ),\n                const SizedBox(height: 10),\n                Column(\n                  mainAxisAlignment: MainAxisAlignment.start,\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    SizedBox(\n                      width: MediaQuery.of(context).size.width * 0.9,\n                      child: const Text(\n                        \"CITY\",\n                        style: TextStyle(\n                          fontSize: 15,\n                          color: Colors.black,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                    ),\n                    const SizedBox(height: 10),\n                    Container(\n                      padding: const EdgeInsets.symmetric(horizontal: 10),\n                      decoration: BoxDecoration(\n                        border: Border.all(\n                          color: Colors.grey,\n                        ),\n                        borderRadius: BorderRadius.circular(10),\n                      ),\n                      child: DropdownButtonFormField(\n                        value: selectCity,\n                        isExpanded: true,\n                        items: cityList.map((value) {\n                          // index = cityList.indexOf(value);\n                          return DropdownMenuItem(\n                            value: value,\n                            child: Text(value),\n                          );\n                        }).toList(),\n                        onChanged: (value) {\n                          setState(() {\n                            selectCity = value.toString();\n                          });\n                        },\n                      ),\n                    ),\n                  ],\n                ),\n                const SizedBox(height: 10),\n                Visibility(\n                  visible: regionCode == \"\" ? false : true,\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.start,\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      SizedBox(\n                        width: MediaQuery.of(context).size.width * 0.9,\n                        child: const Text(\n                          \"Area\",\n                          style: TextStyle(\n                            fontSize: 15,\n                            color: Colors.black,\n                            fontWeight: FontWeight.bold,\n                          ),\n                        ),\n                      ),\n                      const SizedBox(height: 10),\n                      TextFormFieldWidget(\n                        width: MediaQuery.of(context).size.width * 1,\n                        readOnly: true,\n                        controller: areaController,\n                        focusNode: _areaFocus,\n                        onFieldSubmitted: (_) {\n                          FocusScope.of(context)\n                              .requestFocus(_departmentCodeFocus);\n                        },\n                        height: 50,\n                      ),\n                    ],\n                  ),\n                ),\n                const SizedBox(height: 10),\n                // Department ...............................................\n                Column(\n                  mainAxisAlignment: MainAxisAlignment.start,\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    SizedBox(\n                      width: MediaQuery.of(context).size.width * 0.9,\n                      child: const Text(\n                        \"Department\",\n                        style: TextStyle(\n                          fontSize: 15,\n                          color: Colors.black,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                    ),\n                    const SizedBox(height: 10),\n                    Container(\n                      padding: const EdgeInsets.symmetric(horizontal: 10),\n                      decoration: BoxDecoration(\n                        border: Border.all(\n                          color: Colors.grey,\n                        ),\n                        borderRadius: BorderRadius.circular(10),\n                      ),\n                      child: DropdownButtonFormField(\n                        value: departmentName,\n                        isExpanded: true,\n                        items: departmentList.map((value) {\n                          return DropdownMenuItem(\n                            value: value,\n                            child: Text(value),\n                          );\n                        }).toList(),\n                        onChanged: (value) {\n                          setState(() {\n                            departmentName = value.toString();\n                            var index =\n                                departmentList.indexOf(value.toString());\n\n                            if (index >= 0) {\n                              if (index < businessUnitList.length) {\n                                businessNameController.text =\n                                    businessUnitList[index];\n                              }\n                              if (index < branchCodeList.length) {\n                                departmentCodeController.text =\n                                    branchCodeList[index];\n                              }\n                            }\n                          });\n                        },\n                      ),\n                    ),\n                  ],\n                ),\n                const SizedBox(height: 10),\n                Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    SizedBox(\n                      child: const Text(\n                        \"Branch Code\",\n                        style: TextStyle(\n                          fontSize: 15,\n                          color: Colors.black,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                    ),\n                    const SizedBox(height: 10),\n                    TextFormFieldWidget(\n                      width: MediaQuery.of(context).size.width * 1,\n                      readOnly: true,\n                      controller: departmentCodeController,\n                      focusNode: _departmentCodeFocus,\n                      onFieldSubmitted: (_) {\n                        FocusScope.of(context).requestFocus(_businessNameFocus);\n                      },\n                      hintText: 'Enter your branch code',\n                      labelText: 'Branch Code',\n                      height: 50,\n                    ),\n                  ],\n                ),\n                const SizedBox(height: 10),\n                Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    SizedBox(\n                      child: const Text(\n                        \"Business Name\",\n                        style: TextStyle(\n                          fontSize: 15,\n                          color: Colors.black,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                    ),\n                    const SizedBox(height: 10),\n                    TextFormFieldWidget(\n                      width: MediaQuery.of(context).size.width * 1,\n                      readOnly: true,\n                      controller: businessNameController,\n                      focusNode: _businessNameFocus,\n                      onFieldSubmitted: (_) {\n                        FocusScope.of(context).requestFocus(_buildingNameFocus);\n                      },\n                      hintText: 'Enter your business name',\n                      labelText: 'Business Name',\n                      height: 50,\n                    ),\n                  ],\n                ),\n                const SizedBox(height: 10),\n                Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    SizedBox(\n                      child: const Text(\n                        \"Building Name\",\n                        style: TextStyle(\n                          fontSize: 15,\n                          color: Colors.black,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                    ),\n                    const SizedBox(height: 10),\n                    TextFormFieldWidget(\n                      width: MediaQuery.of(context).size.width * 1,\n                      controller: buildingNameController,\n                      focusNode: _buildingNameFocus,\n                      onFieldSubmitted: (_) {\n                        FocusScope.of(context)\n                            .requestFocus(_buildingAddressFocus);\n                      },\n                      hintText: 'Enter your building name',\n                      labelText: 'Building Name',\n                      height: 50,\n                    ),\n                  ],\n                ),\n                const SizedBox(height: 10),\n                Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    SizedBox(\n                      child: const Text(\n                        \"Building Address\",\n                        style: TextStyle(\n                          fontSize: 15,\n                          color: Colors.black,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                    ),\n                    const SizedBox(height: 10),\n                    TextFormFieldWidget(\n                      width: MediaQuery.of(context).size.width * 1,\n                      controller: buildingAddressController,\n                      focusNode: _buildingAddressFocus,\n                      onFieldSubmitted: (_) {\n                        FocusScope.of(context).requestFocus(_buildingNoFocus);\n                      },\n                      height: 50,\n                    ),\n                  ],\n                ),\n                const SizedBox(height: 10),\n                Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    SizedBox(\n                      child: const Text(\n                        \"Building No\",\n                        style: TextStyle(\n                          fontSize: 15,\n                          color: Colors.black,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                    ),\n                    const SizedBox(height: 10),\n                    TextFormFieldWidget(\n                      width: MediaQuery.of(context).size.width * 1,\n                      controller: buildingNoController,\n                      focusNode: _buildingNoFocus,\n                      onFieldSubmitted: (_) {\n                        // This is the last field, so we can hide the keyboard\n                        FocusScope.of(context).unfocus();\n                      },\n                      height: 50,\n                    ),\n                  ],\n                ),\n                const SizedBox(height: 10),\n                Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    SizedBox(\n                      child: const Text(\n                        \"Floor No\",\n                        style: TextStyle(\n                          fontSize: 15,\n                          color: Colors.black,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                    ),\n                    const SizedBox(height: 10),\n                    Container(\n                      padding: const EdgeInsets.symmetric(horizontal: 10),\n                      decoration: BoxDecoration(\n                        border: Border.all(\n                          color: Colors.grey,\n                        ),\n                        borderRadius: BorderRadius.circular(10),\n                      ),\n                      child: DropdownButtonFormField(\n                        value: selectFloorNo,\n                        isExpanded: true,\n                        items: floorNoList.map((value) {\n                          return DropdownMenuItem(\n                            value: value,\n                            child: Text(value),\n                          );\n                        }).toList(),\n                        onChanged: (value) {\n                          setState(() {\n                            selectFloorNo = value.toString();\n                          });\n                        },\n                      ),\n                    ),\n                  ],\n                ),\n                const SizedBox(height: 20),\n                Row(\n                  children: [\n                    Expanded(\n                      child: ButtonWidget(\n                        fontSize: 15,\n                        color: Colors.grey,\n                        title: \"BACK\",\n                        onPressed: () {\n                          Navigator.pop(context);\n                        },\n                        width: MediaQuery.of(context).size.width * 0.4,\n                        height: MediaQuery.of(context).size.height * 0.05,\n                      ),\n                    ),\n                    const SizedBox(width: 10),\n                    Expanded(\n                      child: ButtonWidget(\n                        fontSize: 15,\n                        color: Constant.primaryColor,\n                        title: \"NEXT\",\n                        onPressed: () {\n                          Map<String, String> formData = {};\n\n                          // Only add values that are not null and not empty\n                          if (selectCountry.isNotEmpty) {\n                            formData['country'] = selectCountry;\n                          }\n                          if (selectCity.isNotEmpty) {\n                            formData['city'] = selectCity;\n                          }\n                          if (departmentName.isNotEmpty) {\n                            formData['department'] = departmentName;\n                          }\n                          if (departmentCodeController.text.trim().isNotEmpty) {\n                            formData['departmentCode'] =\n                                departmentCodeController.text.trim();\n                          }\n                          if (businessNameController.text.trim().isNotEmpty) {\n                            formData['businessName'] =\n                                businessNameController.text.trim();\n                          }\n                          if (buildingNameController.text.trim().isNotEmpty) {\n                            formData['buildingName'] =\n                                buildingNameController.text.trim();\n                          }\n                          if (buildingAddressController.text\n                              .trim()\n                              .isNotEmpty) {\n                            formData['buildingAddress'] =\n                                buildingAddressController.text.trim();\n                          }\n                          if (buildingNoController.text.trim().isNotEmpty) {\n                            formData['buildingNumber'] =\n                                buildingNoController.text.trim();\n                          }\n                          if (selectFloorNo.isNotEmpty) {\n                            formData['floorNumber'] = selectFloorNo;\n                          }\n                          if (areaController.text.trim().isNotEmpty) {\n                            formData['region'] = areaController.text.trim();\n                          }\n                          if (businessUnit.isNotEmpty) {\n                            formData['businessUnit'] = businessUnit;\n                          }\n\n                          // Check if we have at least one field filled\n                          if (formData.isEmpty) {\n                            ScaffoldMessenger.of(context).showSnackBar(\n                              const SnackBar(\n                                content: Text(\"Please fill at least one field\"),\n                              ),\n                            );\n                          } else {\n                            Get.to(() => SendBarCodeScreen(\n                                  country: formData['country'] ?? \"\",\n                                  city: formData['city'] ?? \"\",\n                                  department: formData['department'] ?? \"\",\n                                  departmentCode:\n                                      formData['departmentCode'] ?? \"\",\n                                  businessName: formData['businessName'] ?? \"\",\n                                  buildingName: formData['buildingName'] ?? \"\",\n                                  buildingAddress:\n                                      formData['buildingAddress'] ?? \"\",\n                                  buildingNumber:\n                                      formData['buildingNumber'] ?? \"\",\n                                  floorNumber: formData['floorNumber'] ?? \"\",\n                                  region: formData['region'] ?? \"\",\n                                  businessUnit: formData['businessUnit'] ?? \"\",\n                                ));\n                          }\n                        },\n                        width: MediaQuery.of(context).size.width * 0.4,\n                        height: MediaQuery.of(context).size.height * 0.05,\n                      ),\n                    ),\n                  ],\n                ),\n                const SizedBox(height: 20),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
        }
    ]
}