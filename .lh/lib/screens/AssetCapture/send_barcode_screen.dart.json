{
    "sourceFile": "lib/screens/AssetCapture/send_barcode_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1752153775134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752153814542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,16 +151,16 @@\n           } else {\n             Navigator.of(context).pop();\n           }\n         } else {\n-          Navigator.of(context).pop();\n           Get.snackbar(\n             \"Error\",\n             \"No categories found\",\n             snackPosition: SnackPosition.BOTTOM,\n             backgroundColor: Colors.red,\n             colorText: Colors.white,\n           );\n+          Navigator.of(context).pop();\n         }\n       }).onError((error, stackTrace) {\n         Navigator.of(context).pop();\n         Get.offAll(HomeScreen());\n"
                },
                {
                    "date": 1752153860322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,86 +92,50 @@\n \n     Future.delayed(Duration.zero, () {\n       Constant.showLoadingDialog(context);\n       GetAllCategoriesServices.getAllCategories().then((value) {\n-        if (value.isNotEmpty) {\n+        setState(() {\n+          selectCategory = value[0].subDescription.toString();\n+          for (var category in value) {\n+            categoryList.add(category.subDescription ?? \"\");\n+            mCode.add(category.mainCategoryCode ?? \"\");\n+            sCode.add(category.subCategoryCode ?? \"\");\n+            majorDescription.add(category.mainDescription ?? \"\");\n+            minorDescription.add(category.subDescription ?? \"\");\n+          }\n+\n+          // convert these list to set\n+          categoryList = categoryList.toSet().toList();\n+          mCode = mCode.toSet().toList();\n+          sCode = sCode.toSet().toList();\n+          majorDescription = majorDescription.toSet().toList();\n+          minorDescription = minorDescription.toSet().toList();\n+        });\n+        GetBrandServices.getBrandMethod(_sCode, _mCode).then((value) {\n           setState(() {\n-            selectCategory = value[0].subDescription.toString();\n-            for (var category in value) {\n-              categoryList.add(category.subDescription ?? \"\");\n-              mCode.add(category.mainCategoryCode ?? \"\");\n-              sCode.add(category.subCategoryCode ?? \"\");\n-              majorDescription.add(category.mainDescription ?? \"\");\n-              minorDescription.add(category.subDescription ?? \"\");\n-            }\n+            selectBrand = '';\n+            brandList.clear();\n \n-            // convert these list to set\n-            categoryList = categoryList.toSet().toList();\n-            mCode = mCode.toSet().toList();\n-            sCode = sCode.toSet().toList();\n-            majorDescription = majorDescription.toSet().toList();\n-            minorDescription = minorDescription.toSet().toList();\n-\n-            // Set the codes for the first category\n-            if (categoryList.isNotEmpty) {\n-              _mCode = mCode[0];\n-              _sCode = sCode[0];\n-              mainDescription = majorDescription[0];\n-              subDescription = minorDescription[0];\n+            selectBrand = value[0];\n+            // convert brand list to set\n+            for (var brand in value) {\n+              brandList.add(brand);\n             }\n+            brandList = value.toSet().toList();\n+            selectBrand = brandList[0];\n           });\n-\n-          // Only call getBrandMethod if we have valid codes\n-          if (_sCode.isNotEmpty && _mCode.isNotEmpty) {\n-            GetBrandServices.getBrandMethod(_sCode, _mCode).then((brandValue) {\n-              setState(() {\n-                selectBrand = '';\n-                brandList.clear();\n-\n-                if (brandValue.isNotEmpty) {\n-                  selectBrand = brandValue[0];\n-                  // convert brand list to set\n-                  for (var brand in brandValue) {\n-                    brandList.add(brand);\n-                  }\n-                  brandList = brandValue.toSet().toList();\n-                  selectBrand = brandList[0];\n-                }\n-              });\n-              Navigator.of(context).pop();\n-            }).onError((error, stackTrace) {\n-              Navigator.of(context).pop();\n-              Get.snackbar(\n-                \"Error\",\n-                \"Failed to load brands: ${error.toString().replaceAll(\"Exception:\", \"\")}\",\n-                snackPosition: SnackPosition.BOTTOM,\n-                backgroundColor: Colors.red,\n-                colorText: Colors.white,\n-              );\n-            });\n-          } else {\n-            Navigator.of(context).pop();\n-          }\n-        } else {\n-          Get.snackbar(\n-            \"Error\",\n-            \"No categories found\",\n-            snackPosition: SnackPosition.BOTTOM,\n-            backgroundColor: Colors.red,\n-            colorText: Colors.white,\n-          );\n-          Navigator.of(context).pop();\n-        }\n+        });\n+        Navigator.of(context).pop();\n       }).onError((error, stackTrace) {\n-        Navigator.of(context).pop();\n-        Get.offAll(HomeScreen());\n+        Get.offAll(HomeScreen);\n         Get.snackbar(\n           \"Error\",\n-          error.toString().replaceAll(\"Exception:\", \"\"),\n+          error.toString().replaceAll(\"Exception:\", \"replace\"),\n           snackPosition: SnackPosition.BOTTOM,\n           backgroundColor: Colors.red,\n           colorText: Colors.white,\n         );\n+        Navigator.of(context).pop();\n       });\n     });\n   }\n \n@@ -318,37 +282,26 @@\n                                 mainDescription = majorDescription[\n                                     categoryList.indexOf(value.toString())];\n                                 subDescription = minorDescription[\n                                     categoryList.indexOf(value.toString())];\n+\n+                                // _tableBrand.add(value.toString());\n                               });\n-\n                               Constant.showLoadingDialog(context);\n                               GetBrandServices.getBrandMethod(_sCode, _mCode)\n                                   .then((value) {\n                                 setState(() {\n                                   selectBrand = '';\n                                   brandList.clear();\n \n-                                  if (value.isNotEmpty) {\n-                                    selectBrand = value[0];\n-                                    // convert brand list to set\n-                                    for (var brand in value) {\n-                                      brandList.add(brand);\n-                                    }\n-                                    brandList = value.toSet().toList();\n-                                    selectBrand = brandList[0];\n+                                  selectBrand = value[0];\n+                                  // convert brand list to set\n+                                  for (var brand in value) {\n+                                    brandList.add(brand);\n                                   }\n+                                  brandList = value.toSet().toList();\n                                 });\n                                 Navigator.pop(context);\n-                              }).onError((error, stackTrace) {\n-                                Navigator.pop(context);\n-                                Get.snackbar(\n-                                  \"Error\",\n-                                  \"Failed to load brands: ${error.toString().replaceAll(\"Exception:\", \"\")}\",\n-                                  snackPosition: SnackPosition.BOTTOM,\n-                                  backgroundColor: Colors.red,\n-                                  colorText: Colors.white,\n-                                );\n                               });\n                             },\n                           ),\n                         ),\n"
                },
                {
                    "date": 1752153902846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n           sCode = sCode.toSet().toList();\n           majorDescription = majorDescription.toSet().toList();\n           minorDescription = minorDescription.toSet().toList();\n         });\n-        GetBrandServices.getBrandMethod(_sCode, _mCode).then((value) {\n+        await GetBrandServices.getBrandMethod(_sCode, _mCode).then((value) {\n           setState(() {\n             selectBrand = '';\n             brandList.clear();\n \n"
                }
            ],
            "date": 1752153775134,
            "name": "Commit-0",
            "content": "// ignore_for_file: prefer_const_constructors, deprecated_member_use, use_build_context_synchronously\n\nimport 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\n\nimport '../../Services/AddNewBrand/AddNewBrandServices.dart';\nimport '../../Services/GetAllCategories/GetAllCategoriesServices.dart';\nimport '../../Services/GetBrand/GetBrandServices.dart';\nimport '../../Services/SendForBarCode/SendForBarCodeServices.dart';\nimport '../../constants.dart';\nimport '../../widgets/button_widget.dart';\nimport '../../widgets/text_form_field_widget.dart';\nimport '../home_screen.dart';\n\nclass SendBarCodeScreen extends StatefulWidget {\n  final String country;\n  final String city;\n  final String department;\n  final String departmentCode;\n  final String businessName;\n  final String businessUnit;\n  final String buildingName;\n  final String buildingAddress;\n  final String buildingNumber;\n  final String floorNumber;\n  final String region;\n\n  const SendBarCodeScreen({\n    Key? key,\n    required this.country,\n    required this.city,\n    required this.department,\n    required this.departmentCode,\n    required this.businessName,\n    required this.buildingName,\n    required this.buildingAddress,\n    required this.buildingNumber,\n    required this.floorNumber,\n    required this.region,\n    required this.businessUnit,\n  }) : super(key: key);\n\n  @override\n  State<SendBarCodeScreen> createState() => _SendBarCodeScreenState();\n}\n\nclass _SendBarCodeScreenState extends State<SendBarCodeScreen> {\n  TextEditingController filterByController = TextEditingController();\n  TextEditingController modelController = TextEditingController();\n  TextEditingController qtyController = TextEditingController();\n  TextEditingController brandController = TextEditingController();\n\n  String _mCode = \"\";\n  String _sCode = \"\";\n  String mainDescription = \"\";\n  String subDescription = \"\";\n\n  String? selectCategory;\n  var categoryList = [];\n\n  String? selectBrand;\n  var brandList = [];\n\n  static List<String> brand = [];\n  static List<String> model = [];\n  static List<String> qty = [];\n  static List<String> assetClass = [];\n  static List<String> mCode = [];\n  static List<String> sCode = [];\n  static List<String> majorDescription = [];\n  static List<String> minorDescription = [];\n\n  static List<String> _tableBrand = [];\n\n  Map<String, dynamic> record = {\n    \"brand\": brand,\n    \"model\": model,\n    \"qty\": qty,\n    \"assetClass\": assetClass,\n    \"mCode\": mCode,\n    \"sCode\": sCode,\n    \"majorDescription\": majorDescription,\n    \"minorDescription\": minorDescription,\n  };\n\n  @override\n  void initState() {\n    super.initState();\n\n    qtyController.text = \"1\";\n\n    Future.delayed(Duration.zero, () {\n      Constant.showLoadingDialog(context);\n      GetAllCategoriesServices.getAllCategories().then((value) {\n        if (value.isNotEmpty) {\n          setState(() {\n            selectCategory = value[0].subDescription.toString();\n            for (var category in value) {\n              categoryList.add(category.subDescription ?? \"\");\n              mCode.add(category.mainCategoryCode ?? \"\");\n              sCode.add(category.subCategoryCode ?? \"\");\n              majorDescription.add(category.mainDescription ?? \"\");\n              minorDescription.add(category.subDescription ?? \"\");\n            }\n\n            // convert these list to set\n            categoryList = categoryList.toSet().toList();\n            mCode = mCode.toSet().toList();\n            sCode = sCode.toSet().toList();\n            majorDescription = majorDescription.toSet().toList();\n            minorDescription = minorDescription.toSet().toList();\n\n            // Set the codes for the first category\n            if (categoryList.isNotEmpty) {\n              _mCode = mCode[0];\n              _sCode = sCode[0];\n              mainDescription = majorDescription[0];\n              subDescription = minorDescription[0];\n            }\n          });\n\n          // Only call getBrandMethod if we have valid codes\n          if (_sCode.isNotEmpty && _mCode.isNotEmpty) {\n            GetBrandServices.getBrandMethod(_sCode, _mCode).then((brandValue) {\n              setState(() {\n                selectBrand = '';\n                brandList.clear();\n\n                if (brandValue.isNotEmpty) {\n                  selectBrand = brandValue[0];\n                  // convert brand list to set\n                  for (var brand in brandValue) {\n                    brandList.add(brand);\n                  }\n                  brandList = brandValue.toSet().toList();\n                  selectBrand = brandList[0];\n                }\n              });\n              Navigator.of(context).pop();\n            }).onError((error, stackTrace) {\n              Navigator.of(context).pop();\n              Get.snackbar(\n                \"Error\",\n                \"Failed to load brands: ${error.toString().replaceAll(\"Exception:\", \"\")}\",\n                snackPosition: SnackPosition.BOTTOM,\n                backgroundColor: Colors.red,\n                colorText: Colors.white,\n              );\n            });\n          } else {\n            Navigator.of(context).pop();\n          }\n        } else {\n          Navigator.of(context).pop();\n          Get.snackbar(\n            \"Error\",\n            \"No categories found\",\n            snackPosition: SnackPosition.BOTTOM,\n            backgroundColor: Colors.red,\n            colorText: Colors.white,\n          );\n        }\n      }).onError((error, stackTrace) {\n        Navigator.of(context).pop();\n        Get.offAll(HomeScreen());\n        Get.snackbar(\n          \"Error\",\n          error.toString().replaceAll(\"Exception:\", \"\"),\n          snackPosition: SnackPosition.BOTTOM,\n          backgroundColor: Colors.red,\n          colorText: Colors.white,\n        );\n      });\n    });\n  }\n\n  void filterCategoryList() {\n    List<String> filteredList = [];\n    List<String> filteredSCode = [];\n    List<String> filteredMCode = [];\n    List<String> filteredMainDescription = [];\n    List<String> filteredSubDescription = [];\n\n    for (var category in categoryList) {\n      if (category\n          .toLowerCase()\n          .contains(filterByController.text.toLowerCase())) {\n        filteredList.add(category);\n        filteredSCode.add(sCode[categoryList.indexOf(category)]);\n        filteredMCode.add(mCode[categoryList.indexOf(category)]);\n        filteredMainDescription\n            .add(majorDescription[categoryList.indexOf(category)]);\n        filteredSubDescription\n            .add(minorDescription[categoryList.indexOf(category)]);\n      }\n    }\n    setState(() {\n      categoryList = filteredList;\n      selectCategory = categoryList[0];\n      sCode = filteredSCode;\n      mCode = filteredMCode;\n      majorDescription = filteredMainDescription;\n      minorDescription = filteredSubDescription;\n    });\n\n    // when search text is cleared, display all the categories\n    if (filterByController.text.isEmpty) {\n      GetAllCategoriesServices.getAllCategories().then((value) {\n        setState(() {\n          categoryList.clear();\n          sCode.clear();\n          mCode.clear();\n          majorDescription.clear();\n          minorDescription.clear();\n\n          selectCategory = value[0].subDescription.toString();\n          for (var category in value) {\n            categoryList.add(category.subDescription ?? \"\");\n            mCode.add(category.mainCategoryCode ?? \"\");\n            sCode.add(category.subCategoryCode ?? \"\");\n            majorDescription.add(category.mainDescription ?? \"\");\n            minorDescription.add(category.subDescription ?? \"\");\n          }\n        });\n      }).onError((error, stackTrace) {\n        Get.snackbar(\n          \"Error\",\n          error.toString().replaceAll(\"Exception:\", \"replace\"),\n          snackPosition: SnackPosition.BOTTOM,\n          backgroundColor: Colors.red,\n          colorText: Colors.white,\n        );\n      });\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: PreferredSize(\n        preferredSize: const Size.fromHeight(70),\n        child: AppBar(\n          title: const Text(\"Asset Capture\"),\n          centerTitle: true,\n          automaticallyImplyLeading: true,\n        ),\n      ),\n      body: SizedBox(\n        width: MediaQuery.of(context).size.width * 1,\n        height: MediaQuery.of(context).size.height * 1,\n        child: Card(\n          color: Colors.white,\n          elevation: 10,\n          margin: const EdgeInsets.only(\n            bottom: 10,\n          ),\n          shadowColor: Constant.primaryColor,\n          child: Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n            child: Form(\n              child: SingleChildScrollView(\n                child: Column(\n                  children: [\n                    Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        SizedBox(\n                          width: MediaQuery.of(context).size.width * 0.3,\n                          child: const Text(\n                            \"Category\",\n                            style: TextStyle(\n                              fontSize: 15,\n                              color: Colors.black,\n                              fontWeight: FontWeight.bold,\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 10),\n                        Container(\n                          padding: const EdgeInsets.symmetric(\n                            horizontal: 10,\n                          ),\n                          decoration: BoxDecoration(\n                            color: Colors.yellow,\n                            border: Border.all(\n                              color: Colors.black,\n                            ),\n                            borderRadius: BorderRadius.circular(20),\n                          ),\n                          child: DropdownButtonFormField(\n                            isExpanded: true,\n                            style: const TextStyle(\n                              color: Colors.black,\n                              fontSize: 15,\n                            ),\n                            dropdownColor: Colors.yellow,\n                            focusColor: Colors.yellow,\n                            value: selectCategory,\n                            items: categoryList.map((value) {\n                              return DropdownMenuItem(\n                                value: value,\n                                child: Text(\n                                  value,\n                                  softWrap: false,\n                                  overflow: TextOverflow.ellipsis,\n                                ),\n                              );\n                            }).toList(),\n                            onChanged: (value) async {\n                              setState(() {\n                                selectCategory = value.toString();\n                                _mCode = mCode[\n                                    categoryList.indexOf(value.toString())];\n                                _sCode = sCode[\n                                    categoryList.indexOf(value.toString())];\n                                mainDescription = majorDescription[\n                                    categoryList.indexOf(value.toString())];\n                                subDescription = minorDescription[\n                                    categoryList.indexOf(value.toString())];\n                              });\n                              \n                              Constant.showLoadingDialog(context);\n                              GetBrandServices.getBrandMethod(_sCode, _mCode)\n                                  .then((value) {\n                                setState(() {\n                                  selectBrand = '';\n                                  brandList.clear();\n\n                                  if (value.isNotEmpty) {\n                                    selectBrand = value[0];\n                                    // convert brand list to set\n                                    for (var brand in value) {\n                                      brandList.add(brand);\n                                    }\n                                    brandList = value.toSet().toList();\n                                    selectBrand = brandList[0];\n                                  }\n                                });\n                                Navigator.pop(context);\n                              }).onError((error, stackTrace) {\n                                Navigator.pop(context);\n                                Get.snackbar(\n                                  \"Error\",\n                                  \"Failed to load brands: ${error.toString().replaceAll(\"Exception:\", \"\")}\",\n                                  snackPosition: SnackPosition.BOTTOM,\n                                  backgroundColor: Colors.red,\n                                  colorText: Colors.white,\n                                );\n                              });\n                            },\n                          ),\n                        ),\n                        const SizedBox(height: 10),\n                        Container(\n                          padding: const EdgeInsets.symmetric(\n                            horizontal: 10,\n                          ),\n                          decoration: BoxDecoration(\n                            color: Colors.white,\n                            border: Border.all(\n                              color: Colors.black,\n                            ),\n                            borderRadius: BorderRadius.circular(20),\n                          ),\n                          child: TextFormField(\n                            controller: filterByController,\n                            decoration: const InputDecoration(\n                              hintText: \"Search\",\n                              border: InputBorder.none,\n                              suffixIcon: Icon(Icons.search),\n                            ),\n                            onChanged: (value) {\n                              filterCategoryList();\n                            },\n                            onEditingComplete: () {\n                              filterCategoryList();\n                            },\n                          ),\n                        ),\n                        const SizedBox(height: 10),\n                        Row(\n                          children: [\n                            SizedBox(\n                              width: MediaQuery.of(context).size.width * 0.15,\n                              child: const Text(\n                                \"Brand\",\n                                style: TextStyle(\n                                  fontSize: 15,\n                                  color: Colors.black,\n                                  fontWeight: FontWeight.bold,\n                                ),\n                              ),\n                            ),\n                            const SizedBox(width: 10),\n                            Expanded(\n                              flex: 4,\n                              child: Container(\n                                padding:\n                                    const EdgeInsets.symmetric(horizontal: 10),\n                                decoration: BoxDecoration(\n                                  border: Border.all(\n                                    color: Colors.grey,\n                                  ),\n                                  borderRadius: BorderRadius.circular(20),\n                                ),\n                                child: DropdownButtonFormField(\n                                  value: selectBrand,\n                                  isExpanded: true,\n                                  items: brandList.map((value) {\n                                    return DropdownMenuItem(\n                                      value: value,\n                                      child: Text(value),\n                                    );\n                                  }).toList(),\n                                  onChanged: (value) {\n                                    setState(() {\n                                      selectBrand = value.toString();\n                                    });\n                                  },\n                                ),\n                              ),\n                            ),\n                            Expanded(\n                              flex: 1,\n                              child: IconButton(\n                                onPressed: () {\n                                  // A dialog box with singhle text field and submit cancel button\n                                  Get.dialog(\n                                    AlertDialog(\n                                      title: const Text(\n                                        \"Add Brand\",\n                                        style: TextStyle(\n                                          color: Colors.black,\n                                          fontSize: 15,\n                                          fontWeight: FontWeight.bold,\n                                        ),\n                                      ),\n                                      content: TextFormField(\n                                        controller: brandController,\n                                        decoration: const InputDecoration(\n                                          border: OutlineInputBorder(),\n                                        ),\n                                      ),\n                                      actions: [\n                                        TextButton(\n                                          onPressed: () {\n                                            Navigator.pop(context);\n                                          },\n                                          child: const Text(\n                                            \"Cancel\",\n                                            style: TextStyle(\n                                              color: Colors.black,\n                                              fontSize: 15,\n                                              fontWeight: FontWeight.bold,\n                                            ),\n                                          ),\n                                        ),\n                                        TextButton(\n                                          onPressed: () async {\n                                            if (brandController.text.isEmpty) {\n                                              ScaffoldMessenger.of(context)\n                                                  .showSnackBar(\n                                                const SnackBar(\n                                                  content: Text(\n                                                      'Please enter brand name'),\n                                                ),\n                                              );\n                                            } else {\n                                              Constant.showLoadingDialog(\n                                                  context);\n                                              AddNewBrandServices.addBrand(\n                                                brandController.text,\n                                                _mCode,\n                                                _sCode,\n                                                context,\n                                              );\n                                            }\n                                            brandList.add(brandController.text);\n                                            Navigator.pop(context);\n\n                                            setState(() {});\n                                          },\n                                          child: const Text(\n                                            \"Submit\",\n                                            style: TextStyle(\n                                              color: Colors.black,\n                                              fontSize: 15,\n                                              fontWeight: FontWeight.bold,\n                                            ),\n                                          ),\n                                        ),\n                                      ],\n                                    ),\n                                  );\n                                },\n                                icon: const Icon(\n                                  Icons.add,\n                                ),\n                              ),\n                            ),\n                          ],\n                        ),\n                        const SizedBox(height: 10),\n                        Row(\n                          children: [\n                            SizedBox(\n                              width: MediaQuery.of(context).size.width * 0.15,\n                              child: const Text(\n                                \"Model\",\n                                style: TextStyle(\n                                  fontSize: 15,\n                                  color: Colors.black,\n                                  fontWeight: FontWeight.bold,\n                                ),\n                              ),\n                            ),\n                            const SizedBox(width: 10),\n                            Expanded(\n                              flex: 4,\n                              child: TextFormFieldWidget(\n                                controller: modelController,\n                                width: MediaQuery.of(context).size.width * 1,\n                              ),\n                            ),\n                            Expanded(\n                              flex: 1,\n                              child: GestureDetector(\n                                onTap: () {\n                                  setState(() {\n                                    brand.add(selectBrand.toString());\n                                    model.add(modelController.text);\n                                    qty.add(qtyController.text);\n                                    assetClass.add(selectBrand.toString());\n                                    mCode.add(_mCode);\n                                    sCode.add(_sCode);\n                                    majorDescription.add(mainDescription);\n                                    minorDescription\n                                        .add(selectCategory.toString());\n                                    _tableBrand.add(selectCategory.toString());\n                                  });\n                                },\n                                child: const CircleAvatar(\n                                  backgroundColor: Colors.black,\n                                  child: Icon(\n                                    Icons.arrow_downward_rounded,\n                                    color: Colors.white,\n                                  ),\n                                ),\n                              ),\n                            ),\n                          ],\n                        ),\n                        const SizedBox(height: 10),\n                        Row(\n                          mainAxisAlignment: MainAxisAlignment.center,\n                          children: [\n                            Container(\n                              decoration: BoxDecoration(\n                                color: Colors.grey,\n                                borderRadius: BorderRadius.circular(30),\n                              ),\n                              child: GestureDetector(\n                                onTap: () {\n                                  setState(() {\n                                    if (qtyController.text == \"1\") {\n                                      return;\n                                    } else {\n                                      qtyController.text =\n                                          (int.parse(qtyController.text) - 1)\n                                              .toString();\n                                    }\n                                  });\n                                },\n                                child: const Icon(\n                                  Icons.remove,\n                                  color: Colors.white,\n                                  size: 30,\n                                ),\n                              ),\n                            ),\n                            const SizedBox(width: 10),\n                            TextFormFieldWidget(\n                              width: MediaQuery.of(context).size.width * 0.2,\n                              controller: qtyController,\n                              readOnly: true,\n                              color: Colors.yellow,\n                            ),\n                            const SizedBox(width: 10),\n                            Container(\n                              decoration: BoxDecoration(\n                                color: Colors.black,\n                                borderRadius: BorderRadius.circular(30),\n                              ),\n                              child: GestureDetector(\n                                onTap: () {\n                                  setState(() {\n                                    qtyController.text =\n                                        (int.parse(qtyController.text) + 1)\n                                            .toString();\n                                  });\n                                },\n                                child: const Icon(\n                                  Icons.add,\n                                  color: Colors.white,\n                                  size: 30,\n                                ),\n                              ),\n                            ),\n                          ],\n                        ),\n                        const SizedBox(height: 10),\n                        Container(\n                          height: 200,\n                          width: MediaQuery.of(context).size.width * 1,\n                          decoration: BoxDecoration(\n                            border: Border.all(\n                              color: Colors.black,\n                              width: 1,\n                            ),\n                          ),\n                          child: SingleChildScrollView(\n                            scrollDirection: Axis.vertical,\n                            child: SingleChildScrollView(\n                              scrollDirection: Axis.horizontal,\n                              child: DataTable(\n                                border: TableBorder.all(\n                                  color: Colors.black,\n                                  width: 1,\n                                ),\n                                dataRowColor: MaterialStateColor.resolveWith(\n                                    (states) => Colors.white),\n                                headingRowColor: MaterialStateColor.resolveWith(\n                                  (states) => Constant.primaryColor,\n                                ),\n                                columnSpacing: 10,\n                                dataRowHeight: 30,\n                                columns: const [\n                                  DataColumn(\n                                      label: Text(\n                                    'Type',\n                                    style: TextStyle(\n                                      color: Colors.white,\n                                    ),\n                                  )),\n                                  DataColumn(\n                                      label: Text(\n                                    'Model',\n                                    style: TextStyle(\n                                      color: Colors.white,\n                                    ),\n                                  )),\n                                  DataColumn(\n                                      label: Text(\n                                    'QTY',\n                                    style: TextStyle(\n                                      color: Colors.white,\n                                    ),\n                                  )),\n                                  DataColumn(\n                                      label: Text(\n                                    'Asset Class',\n                                    style: TextStyle(\n                                      color: Colors.white,\n                                    ),\n                                  )),\n                                  DataColumn(\n                                      label: Text(\n                                    'M-Code',\n                                    style: TextStyle(\n                                      color: Colors.white,\n                                    ),\n                                  )),\n                                  DataColumn(\n                                      label: Text(\n                                    'S-Code',\n                                    style: TextStyle(\n                                      color: Colors.white,\n                                    ),\n                                  )),\n                                  DataColumn(\n                                      label: Text(\n                                    'Major Description',\n                                    style: TextStyle(\n                                      color: Colors.white,\n                                    ),\n                                  )),\n                                  DataColumn(\n                                      label: Text(\n                                    'Minor Description',\n                                    style: TextStyle(\n                                      color: Colors.white,\n                                    ),\n                                  )),\n                                  DataColumn(\n                                      label: Text(\n                                    \"Delete\",\n                                    style: TextStyle(color: Colors.white),\n                                  )),\n                                ],\n                                rows: [\n                                  for (int i = 0; i < brand.length; i++)\n                                    DataRow(\n                                      cells: [\n                                        DataCell(Text(brand[i])),\n                                        DataCell(Text(model[i])),\n                                        DataCell(\n                                          Row(\n                                            children: [\n                                              IconButton(\n                                                onPressed: () {\n                                                  if (qty[i] == \"1\") {\n                                                    Get.dialog(\n                                                      AlertDialog(\n                                                        title: const Text(\n                                                            'Delete'),\n                                                        content: const Text(\n                                                            'Are you sure you want to delete this item?'),\n                                                        actions: [\n                                                          TextButton(\n                                                            onPressed: () {\n                                                              Get.back();\n                                                            },\n                                                            child: const Text(\n                                                                'No'),\n                                                          ),\n                                                          TextButton(\n                                                            onPressed: () {\n                                                              Get.back();\n                                                              setState(() {\n                                                                brand.removeAt(\n                                                                    i);\n                                                                model.removeAt(\n                                                                    i);\n                                                                qty.removeAt(i);\n                                                                assetClass\n                                                                    .removeAt(\n                                                                        i);\n                                                                mCode.removeAt(\n                                                                    i);\n                                                                sCode.removeAt(\n                                                                    i);\n                                                                majorDescription\n                                                                    .removeAt(\n                                                                        i);\n                                                                minorDescription\n                                                                    .removeAt(\n                                                                        i);\n                                                                _tableBrand\n                                                                    .removeAt(\n                                                                        i);\n                                                              });\n                                                            },\n                                                            child: const Text(\n                                                                'Yes'),\n                                                          ),\n                                                        ],\n                                                      ),\n                                                    );\n                                                    return;\n                                                  }\n                                                  setState(() {\n                                                    qty[i] =\n                                                        (int.parse(qty[i]) - 1)\n                                                            .toString();\n                                                  });\n                                                },\n                                                icon: const Icon(Icons.remove,\n                                                    size: 20),\n                                              ),\n                                              Text(qty[i]),\n                                              IconButton(\n                                                onPressed: () {\n                                                  setState(() {\n                                                    qty[i] =\n                                                        (int.parse(qty[i]) + 1)\n                                                            .toString();\n                                                  });\n                                                },\n                                                icon: const Icon(Icons.add,\n                                                    size: 20),\n                                              ),\n                                            ],\n                                          ),\n                                        ),\n                                        DataCell(Text(_tableBrand[i])),\n                                        DataCell(Text(mCode[i])),\n                                        DataCell(Text(sCode[i])),\n                                        DataCell(Text(majorDescription[i])),\n                                        DataCell(Text(_tableBrand[i])),\n                                        DataCell(\n                                          FittedBox(\n                                            child: IconButton(\n                                              onPressed: () {\n                                                Get.dialog(\n                                                  AlertDialog(\n                                                    title: const Text('Delete'),\n                                                    content: const Text(\n                                                        'Are you sure you want to delete this item?'),\n                                                    actions: [\n                                                      TextButton(\n                                                        onPressed: () {\n                                                          Get.back();\n                                                        },\n                                                        child: const Text('No'),\n                                                      ),\n                                                      TextButton(\n                                                        onPressed: () {\n                                                          Get.back();\n                                                          setState(() {\n                                                            brand.removeAt(i);\n                                                            model.removeAt(i);\n                                                            qty.removeAt(i);\n                                                            assetClass\n                                                                .removeAt(i);\n                                                            mCode.removeAt(i);\n                                                            sCode.removeAt(i);\n                                                            majorDescription\n                                                                .removeAt(i);\n                                                            minorDescription\n                                                                .removeAt(i);\n                                                          });\n                                                        },\n                                                        child:\n                                                            const Text('Yes'),\n                                                      ),\n                                                    ],\n                                                  ),\n                                                );\n                                              },\n                                              icon: const Icon(\n                                                Icons.delete,\n                                                size: 30,\n                                                color: Colors.red,\n                                              ),\n                                            ),\n                                          ),\n                                        )\n                                      ],\n                                    ),\n                                ],\n                              ),\n                            ),\n                          ),\n                        ),\n                        const SizedBox(height: 20),\n                        Row(\n                          mainAxisAlignment: MainAxisAlignment.center,\n                          children: [\n                            ButtonWidget(\n                              color: Colors.grey,\n                              title: \"BACK\",\n                              onPressed: () {\n                                Navigator.pop(context);\n                              },\n                              width: MediaQuery.of(context).size.width * 0.42,\n                              height: MediaQuery.of(context).size.height * 0.05,\n                              fontSize: 15,\n                            ),\n                            SizedBox(width: 10),\n                            ButtonWidget(\n                              color: Constant.primaryColor,\n                              title: \"Send For Barcode\",\n                              onPressed: () async {\n                                String userLoginId = \"\";\n                                SharedPreferences prefs =\n                                    await SharedPreferences.getInstance();\n                                setState(() {\n                                  userLoginId =\n                                      prefs.getString(\"userLoginId\") ?? \"\";\n                                });\n                                Constant.showLoadingDialog(context);\n\n                                for (int i = 0; i < model.length; i++) {\n                                  int leng = int.parse(qty[i]);\n\n                                  for (int j = 0; j < leng; j++) {\n                                    SendForBarCodeServices.sendForBarCode(\n                                      1,\n                                      mCode[i],\n                                      widget.businessUnit,\n                                      majorDescription[i],\n                                      sCode[i],\n                                      _tableBrand[i],\n                                      \"${_tableBrand[i]} ${brand[i]} ${model[i]}\",\n                                      widget.country,\n                                      widget.region,\n                                      widget.city,\n                                      widget.departmentCode,\n                                      widget.department,\n                                      widget.buildingNumber,\n                                      widget.floorNumber,\n                                      model[i],\n                                      brand[i],\n                                      widget.buildingName,\n                                      widget.buildingAddress,\n                                      userLoginId\n                                          .toString()\n                                          .replaceAll(\"\\\"\", \"\"),\n                                    ).then((value) {\n                                      Navigator.of(context).pop();\n                                      Get.snackbar(\n                                        \"Success\",\n                                        \"Barcode send successfully\",\n                                        backgroundColor: Colors.green,\n                                        colorText: Colors.white,\n                                        snackPosition: SnackPosition.BOTTOM,\n                                        duration: const Duration(seconds: 3),\n                                        isDismissible: true,\n                                      );\n\n                                      Get.offAll(const HomeScreen());\n                                    }).onError((error, stackTrace) {\n                                      Navigator.of(context).pop();\n                                      Get.snackbar(\n                                        \"Error\",\n                                        \"Failed to send barcode\",\n                                        backgroundColor: Colors.red,\n                                        colorText: Colors.white,\n                                        snackPosition: SnackPosition.BOTTOM,\n                                        duration: const Duration(seconds: 3),\n                                        isDismissible: true,\n                                      );\n                                    });\n                                  }\n                                }\n                              },\n                              width: MediaQuery.of(context).size.width * 0.42,\n                              height: MediaQuery.of(context).size.height * 0.05,\n                              fontSize: 15,\n                            ),\n                          ],\n                        ),\n                        const SizedBox(height: 10),\n                      ],\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    super.dispose();\n    filterByController.dispose();\n    modelController.dispose();\n    qtyController.clear();\n    qtyController.dispose();\n\n    brandList.clear();\n    selectBrand = \"Select Brand\";\n    brandList.insert(0, \"Select Brand\");\n\n    categoryList.clear();\n    selectCategory = \"Select Category\";\n    categoryList.insert(0, \"Select Category\");\n\n    brand.clear();\n    model.clear();\n    qty.clear();\n    assetClass.clear();\n    mCode.clear();\n    sCode.clear();\n    majorDescription.clear();\n    minorDescription.clear();\n\n    _tableBrand.clear();\n  }\n}\n"
        }
    ]
}